import React, { useState, useEffect } from 'react';
import {
  TextField,
  Chip,
  MenuItem,
  Checkbox,
  ListItemText,
  InputAdornment,
  IconButton,
  Paper,
  Popper,
  Grow,
  ClickAwayListener,
  MenuList,
  Box,
  Typography,
  Divider
} from '@material-ui/core';
import { Search as SearchIcon, Add as AddIcon } from '@material-ui/icons';

const MultiSelectWithAddOption = ({
  options: initialOptions = [],
  selectedValues: initialSelectedValues = [],
  label = 'Select items',
  placeholder = 'Search...',
  addOptionText = 'Add "{searchText}" as new option',
  noOptionsText = 'No options found',
  onSelectionChange,
  onAddNewOption
}) => {
  const [options, setOptions] = useState(initialOptions);
  const [selectedValues, setSelectedValues] = useState(initialSelectedValues);
  const [searchText, setSearchText] = useState('');
  const [open, setOpen] = useState(false);
  const [anchorEl, setAnchorEl] = useState(null);

  useEffect(() => {
    setOptions(initialOptions);
  }, [initialOptions]);

  useEffect(() => {
    setSelectedValues(initialSelectedValues);
  }, [initialSelectedValues]);

  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  const handleSearchChange = (event) => {
    setSearchText(event.target.value);
  };

  const handleToggle = (value) => {
    const currentIndex = selectedValues.indexOf(value);
    const newSelectedValues = [...selectedValues];

    if (currentIndex === -1) {
      newSelectedValues.push(value);
    } else {
      newSelectedValues.splice(currentIndex, 1);
    }

    setSelectedValues(newSelectedValues);
    if (onSelectionChange) {
      onSelectionChange(newSelectedValues);
    }
  };

  const handleAddNewItem = () => {
    if (searchText.trim() && !options.includes(searchText)) {
      const newOptions = [...options, searchText];
      setOptions(newOptions);
      handleToggle(searchText);
      if (onAddNewOption) {
        onAddNewOption(searchText);
      }
      setSearchText('');
      handleClose();
    }
  };

  const handleDeleteChip = (value) => () => {
    const newSelectedValues = selectedValues.filter(item => item !== value);
    setSelectedValues(newSelectedValues);
    if (onSelectionChange) {
      onSelectionChange(newSelectedValues);
    }
  };

  const filteredOptions = options.filter(option =>
    option.toLowerCase().includes(searchText.toLowerCase())
  );

  const showAddOption = searchText.trim() && 
    !filteredOptions.includes(searchText) && 
    !options.includes(searchText);

  return (
    <div>
      <TextField
        fullWidth
        label={label}
        placeholder={placeholder}
        value={searchText}
        onClick={handleClick}
        onChange={handleSearchChange}
        InputProps={{
          startAdornment: (
            <InputAdornment position="start">
              <SearchIcon />
            </InputAdornment>
          ),
        }}
      />

      <Box sx={{ mt: 1, display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
        {selectedValues.map((value) => (
          <Chip
            key={value}
            label={value}
            onDelete={handleDeleteChip(value)}
            color="primary"
            variant="outlined"
          />
        ))}
      </Box>

      <Popper
        open={open}
        anchorEl={anchorEl}
        role={undefined}
        transition
        disablePortal
        style={{ 
          zIndex: 1300, 
          width: anchorEl?.clientWidth,
          maxHeight: '300px',
          overflow: 'auto'
        }}
      >
        {({ TransitionProps, placement }) => (
          <Grow
            {...TransitionProps}
            style={{
              transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',
            }}
          >
            <Paper elevation={3}>
              <ClickAwayListener onClickAway={handleClose}>
                <MenuList autoFocusItem={open}>
                  {filteredOptions.length > 0 ? (
                    filteredOptions.map((option) => (
                      <MenuItem
                        key={option}
                        value={option}
                        onClick={() => handleToggle(option)}
                      >
                        <Checkbox 
                          checked={selectedValues.indexOf(option) > -1} 
                          color="primary"
                        />
                        <ListItemText primary={option} />
                      </MenuItem>
                    ))
                  ) : (
                    !showAddOption && (
                      <MenuItem disabled>
                        <Typography variant="body2" color="textSecondary">
                          {noOptionsText}
                        </Typography>
                      </MenuItem>
                    )
                  )}

                  {showAddOption && (
                    <>
                      {filteredOptions.length > 0 && <Divider />}
                      <MenuItem
                        onClick={handleAddNewItem}
                        style={{ backgroundColor: 'rgba(0, 0, 0, 0.04)' }}
                      >
                        <Box display="flex" alignItems="center">
                          <AddIcon color="primary" style={{ marginRight: 8 }} />
                          <Typography color="primary">
                            {addOptionText.replace('{searchText}', searchText)}
                          </Typography>
                        </Box>
                      </MenuItem>
                    </>
                  )}
                </MenuList>
              </ClickAwayListener>
            </Paper>
          </Grow>
        )}
      </Popper>
    </div>
  );
};

export default MultiSelectWithAddOption;
