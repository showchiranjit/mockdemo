import React, { useState, useEffect } from 'react';
import {
  TextField,
  Chip,
  MenuItem,
  Checkbox,
  ListItemText,
  InputAdornment,
  IconButton,
  Paper,
  Popper,
  Grow,
  ClickAwayListener,
  MenuList,
  Box,
  Typography,
  Divider,
  Autocomplete
} from '@mui/material';
import {
  Search as SearchIcon,
  Add as AddIcon,
  Check as CheckIcon
} from '@mui/icons-material';

interface MultiSelectWithSearchProps {
  options: string[];
  selectedValues: string[];
  label?: string;
  placeholder?: string;
  addOptionText?: string;
  noOptionsText?: string;
  onSelectionChange: (selected: string[]) => void;
  onAddNewOption?: (newOption: string) => void;
}

const MultiSelectWithSearch = ({
  options = [],
  selectedValues = [],
  label = 'Select items',
  placeholder = 'Search...',
  addOptionText = 'Add "{searchText}"',
  noOptionsText = 'No options found',
  onSelectionChange,
  onAddNewOption
}: MultiSelectWithSearchProps) => {
  const [searchText, setSearchText] = useState('');
  const [open, setOpen] = useState(false);
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);

  const filteredOptions = options.filter(option =>
    option.toLowerCase().includes(searchText.toLowerCase())
  );

  const showAddOption = searchText.trim() && 
    !filteredOptions.includes(searchText) && 
    !options.includes(searchText);

  const handleToggle = (value: string) => {
    const currentIndex = selectedValues.indexOf(value);
    const newSelectedValues = [...selectedValues];

    if (currentIndex === -1) {
      newSelectedValues.push(value);
    } else {
      newSelectedValues.splice(currentIndex, 1);
    }

    onSelectionChange(newSelectedValues);
  };

  const handleAddNewItem = () => {
    if (searchText.trim() && !options.includes(searchText)) {
      const newOption = searchText;
      onSelectionChange([...selectedValues, newOption]);
      if (onAddNewOption) {
        onAddNewOption(newOption);
      }
      setSearchText('');
      setOpen(false);
    }
  };

  const handleDeleteChip = (value: string) => () => {
    const newSelectedValues = selectedValues.filter(item => item !== value);
    onSelectionChange(newSelectedValues);
  };

  return (
    <Box sx={{ width: '100%' }}>
      <TextField
        fullWidth
        label={label}
        placeholder={placeholder}
        value={searchText}
        onClick={(e) => {
          setAnchorEl(e.currentTarget);
          setOpen(true);
        }}
        onChange={(e) => setSearchText(e.target.value)}
        InputProps={{
          startAdornment: (
            <InputAdornment position="start">
              <SearchIcon />
            </InputAdornment>
          ),
          endAdornment: (
            <InputAdornment position="end">
              <IconButton
                onClick={(e) => {
                  e.stopPropagation();
                  handleAddNewItem();
                }}
                edge="end"
                disabled={!showAddOption}
                size="small"
              >
                <AddIcon fontSize="small" />
              </IconButton>
            </InputAdornment>
          )
        }}
      />

      <Box sx={{ mt: 1, display: 'flex', flexWrap: 'wrap', gap: 1 }}>
        {selectedValues.map((value) => (
          <Chip
            key={value}
            label={value}
            onDelete={handleDeleteChip(value)}
            color="primary"
            variant="outlined"
            size="small"
          />
        ))}
      </Box>

      <Popper
        open={open}
        anchorEl={anchorEl}
        placement="bottom-start"
        transition
        disablePortal
        sx={{ 
          zIndex: 1300,
          width: anchorEl ? anchorEl.clientWidth : undefined,
          maxHeight: 300,
          overflow: 'auto'
        }}
      >
        {({ TransitionProps }) => (
          <Grow {...TransitionProps}>
            <Paper elevation={3}>
              <ClickAwayListener onClickAway={() => setOpen(false)}>
                <MenuList autoFocusItem={open} dense>
                  {filteredOptions.length > 0 ? (
                    filteredOptions.map((option) => (
                      <MenuItem
                        key={option}
                        onClick={() => handleToggle(option)}
                        sx={{
                          py: 0.5,
                          minHeight: 'auto'
                        }}
                      >
                        <Checkbox 
                          checked={selectedValues.includes(option)}
                          size="small"
                          sx={{ py: 0.5 }}
                          icon={<span />}
                          checkedIcon={<CheckIcon fontSize="small" />}
                        />
                        <ListItemText primary={option} sx={{ my: 0 }} />
                      </MenuItem>
                    ))
                  ) : (
                    !showAddOption && (
                      <MenuItem disabled>
                        <Typography variant="body2" color="text.secondary">
                          {noOptionsText}
                        </Typography>
                      </MenuItem>
                    )
                  )}

                  {showAddOption && (
                    <>
                      {filteredOptions.length > 0 && <Divider />}
                      <MenuItem
                        onClick={handleAddNewItem}
                        sx={{
                          backgroundColor: 'action.hover',
                          py: 0.5,
                          minHeight: 'auto'
                        }}
                      >
                        <Box display="flex" alignItems="center" gap={1}>
                          <AddIcon color="primary" fontSize="small" />
                          <Typography color="primary" variant="body2">
                            {addOptionText.replace('{searchText}', searchText)}
                          </Typography>
                        </Box>
                      </MenuItem>
                    </>
                  )}
                </MenuList>
              </ClickAwayListener>
            </Paper>
          </Grow>
        )}
      </Popper>
    </Box>
  );
};

export default MultiSelectWithSearch;
